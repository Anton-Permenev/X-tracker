package com.xtracker.android.caching;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.xtracker.android.objects.Jump;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JUMP.
*/
public class JumpDao extends AbstractDao<Jump, Void> {

    public static final String TABLENAME = "JUMP";

    /**
     * Properties of entity Jump.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property JumpId = new Property(0, Long.class, "jumpId", false, "JUMP_ID");
        public final static Property AirTime = new Property(1, Float.class, "airTime", false, "AIR_TIME");
        public final static Property TrackId = new Property(2, Long.class, "trackId", false, "TRACK_ID");
    };

    private Query<Jump> track_JumpsQuery;

    public JumpDao(DaoConfig config) {
        super(config);
    }
    
    public JumpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JUMP' (" + //
                "'JUMP_ID' INTEGER," + // 0: jumpId
                "'AIR_TIME' REAL," + // 1: airTime
                "'TRACK_ID' INTEGER);"); // 2: trackId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JUMP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Jump entity) {
        stmt.clearBindings();
 
        Long jumpId = entity.getJumpId();
        if (jumpId != null) {
            stmt.bindLong(1, jumpId);
        }
 
        Float airTime = entity.getAirTime();
        if (airTime != null) {
            stmt.bindDouble(2, airTime);
        }
 
        Long trackId = entity.getTrackId();
        if (trackId != null) {
            stmt.bindLong(3, trackId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Jump readEntity(Cursor cursor, int offset) {
        Jump entity = new Jump( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // jumpId
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // airTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // trackId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Jump entity, int offset) {
        entity.setJumpId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAirTime(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setTrackId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Jump entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Jump entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "jumps" to-many relationship of Track. */
    public List<Jump> _queryTrack_Jumps(Long trackId) {
        synchronized (this) {
            if (track_JumpsQuery == null) {
                QueryBuilder<Jump> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TrackId.eq(null));
                track_JumpsQuery = queryBuilder.build();
            }
        }
        Query<Jump> query = track_JumpsQuery.forCurrentThread();
        query.setParameter(0, trackId);
        return query.list();
    }

}
