package com.xtracker.android.caching;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.xtracker.android.objects.Point;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POINT.
*/
public class PointDao extends AbstractDao<Point, Long> {

    public static final String TABLENAME = "POINT";

    /**
     * Properties of entity Point.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PointId = new Property(0, Long.class, "pointId", true, "POINT_ID");
        public final static Property Acceleration = new Property(1, Double.class, "acceleration", false, "ACCELERATION");
        public final static Property Speed = new Property(2, Float.class, "speed", false, "SPEED");
        public final static Property Lat = new Property(3, Double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(4, Double.class, "lon", false, "LON");
        public final static Property Height = new Property(5, Double.class, "height", false, "HEIGHT");
        public final static Property TrackId = new Property(6, Long.class, "trackId", false, "TRACK_ID");
    };

    private Query<Point> track_PointsQuery;

    public PointDao(DaoConfig config) {
        super(config);
    }
    
    public PointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POINT' (" + //
                "'POINT_ID' INTEGER PRIMARY KEY ," + // 0: pointId
                "'ACCELERATION' REAL," + // 1: acceleration
                "'SPEED' REAL," + // 2: speed
                "'LAT' REAL," + // 3: lat
                "'LON' REAL," + // 4: lon
                "'HEIGHT' REAL," + // 5: height
                "'TRACK_ID' INTEGER);"); // 6: trackId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POINT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Point entity) {
        stmt.clearBindings();
 
        Long pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindLong(1, pointId);
        }
 
        Double acceleration = entity.getAcceleration();
        if (acceleration != null) {
            stmt.bindDouble(2, acceleration);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(3, speed);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(4, lat);
        }
 
        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(5, lon);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(6, height);
        }
 
        Long trackId = entity.getTrackId();
        if (trackId != null) {
            stmt.bindLong(7, trackId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Point readEntity(Cursor cursor, int offset) {
        Point entity = new Point( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pointId
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // acceleration
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // speed
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lat
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lon
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // height
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // trackId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // trackId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Point entity, int offset) {
        entity.setPointId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAcceleration(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setSpeed(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLon(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setHeight(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTrackId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Point entity, long rowId) {
        entity.setPointId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Point entity) {
        if(entity != null) {
            return entity.getPointId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "points" to-many relationship of Track. */
    public List<Point> _queryTrack_Points(Long trackId) {
        synchronized (this) {
            if (track_PointsQuery == null) {
                QueryBuilder<Point> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TrackId.eq(null));
                track_PointsQuery = queryBuilder.build();
            }
        }
        Query<Point> query = track_PointsQuery.forCurrentThread();
        query.setParameter(0, trackId);
        return query.list();
    }

}
