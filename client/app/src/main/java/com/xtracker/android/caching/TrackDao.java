package com.xtracker.android.caching;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.xtracker.android.objects.Track;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRACK.
*/
public class TrackDao extends AbstractDao<Track, Long> {

    public static final String TABLENAME = "TRACK";

    /**
     * Properties of entity Track.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TrackId = new Property(0, Long.class, "trackId", true, "TRACK_ID");
        public final static Property TimeStart = new Property(1, String.class, "timeStart", false, "TIME_START");
        public final static Property TimeEnd = new Property(2, String.class, "timeEnd", false, "TIME_END");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property UserId = new Property(5, Long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;


    public TrackDao(DaoConfig config) {
        super(config);
    }
    
    public TrackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRACK' (" + //
                "'TRACK_ID' INTEGER PRIMARY KEY ," + // 0: trackId
                "'TIME_START' TEXT," + // 1: timeStart
                "'TIME_END' TEXT," + // 2: timeEnd
                "'TITLE' TEXT," + // 3: title
                "'DESCRIPTION' TEXT," + // 4: description
                "'USER_ID' INTEGER);"); // 5: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRACK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Track entity) {
        stmt.clearBindings();
 
        Long trackId = entity.getTrackId();
        if (trackId != null) {
            stmt.bindLong(1, trackId);
        }
 
        String timeStart = entity.getTimeStart();
        if (timeStart != null) {
            stmt.bindString(2, timeStart);
        }
 
        String timeEnd = entity.getTimeEnd();
        if (timeEnd != null) {
            stmt.bindString(3, timeEnd);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(6, userId);
        }
    }

    @Override
    protected void attachEntity(Track entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Track readEntity(Cursor cursor, int offset) {
        Track entity = new Track( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // trackId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // timeStart
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // timeEnd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Track entity, int offset) {
        entity.setTrackId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeStart(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimeEnd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Track entity, long rowId) {
        entity.setTrackId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Track entity) {
        if(entity != null) {
            return entity.getTrackId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
